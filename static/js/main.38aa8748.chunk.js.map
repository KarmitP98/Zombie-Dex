{"version":3,"sources":["components/card/card.tsx","components/card-list/card-list.tsx","components/search-box/search-box.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","value","SearchBox","placeholder","handleChange","type","onChange","App","state","search","fetch","then","res","json","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAGaA,EAAO,SAAEC,GAAF,OACnB,sBAAKC,UAAa,iBAAlB,UACC,qBAAKC,IAAG,+BAA4BF,EAAMG,QAAQC,GAA1C,0BAAsEC,IAAM,YACpF,6BAA8BL,EAAMG,QAAQG,MAAjCN,EAAMG,QAAQC,IACzB,4BAAIJ,EAAMG,QAAQI,YCHPC,EAAW,SAAER,GACzB,OACC,qBAAKC,UAAW,YAAhB,SAEED,EAAMS,SAASC,KAAK,SAAEC,GAAF,OAAkB,cAAC,EAAD,CAAMR,QAASQ,GAAYA,EAAMP,UCJ9DQ,G,MAAY,SAAC,GAAqC,IAAlCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,aAEzC,OACC,uBAAOC,KAAO,SACPT,KAAO,OACPF,GAAK,OACLH,UAAa,SACbY,YAAeA,EACfG,SAAYF,MCwBNG,E,kDA5Bd,WAAajB,GAAc,IAAD,8BACzB,cAAOA,IACFkB,MAAQ,CACZT,SAAU,GACVU,OAAQ,IAJgB,E,qDAQ1B,WAAqB,IAAD,OACnBC,MAAO,8CACLC,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UACjBF,MAAM,SAAAE,GAAI,OAAI,EAAKC,SAAU,CAAEf,SAAUc,S,oBAE5C,WAAU,IAAD,SACqBE,KAAKP,MAA1BT,EADA,EACAA,SAAUU,EADV,EACUA,OACZO,EAAmBjB,EAASkB,QAAQ,SAAExB,GAAF,OAAoBA,EAAQG,KAAKsB,cAAcC,SAAUV,EAAOS,kBAC1G,OACC,sBAAK3B,UAAa,MAAlB,UACC,iDACA,cAAC,EAAD,CACCY,YAAc,kBACdC,aAAgB,SAAEgB,GAAF,OAAuC,EAAKN,SAAU,CAAEL,OAAQW,EAAEC,OAAOpB,WAC1F,cAAC,EAAD,CAAUF,SAAYiB,W,GAxBRM,aCQHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.38aa8748.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = ( props: any ) => (\r\n\t<div className = {'card-container'}>\r\n\t\t<img src = {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt = \"monster\"/>\r\n\t\t<h2 key = {props.monster.id}>{props.monster.name}</h2>\r\n\t\t<p>{props.monster.email}</p>\r\n\t</div>\r\n);\r\n","import React from 'react';\r\nimport './card-list.styles.css'\r\nimport { Card } from '../card/card';\r\n\r\nexport const CardList = ( props: any ) => {\r\n\treturn (\r\n\t\t<div className={'card-list'}>\r\n\t\t\t{\r\n\t\t\t\tprops.monsters.map( ( value: any ) => <Card monster={value} key={value.id} /> )\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\n// @ts-ignore\r\nexport const SearchBox = ( { placeholder, handleChange } ) => {\r\n\t\r\n\treturn (\r\n\t\t<input type = \"search\"\r\n\t\t       name = \"name\"\r\n\t\t       id = \"name\"\r\n\t\t       className = {'search'}\r\n\t\t       placeholder = {placeholder}\r\n\t\t       onChange = {handleChange}/>\r\n\t);\r\n};\r\n","import React, { Component } from 'react';\nimport './App.css';\n// @ts-ignore\nimport { CardList } from './components/card-list/card-list';\nimport { SearchBox } from './components/search-box/search-box';\n\nclass App extends Component<any, any> {\n\t\n\tconstructor( props: any ) {\n\t\tsuper( props );\n\t\tthis.state = {\n\t\t\tmonsters: [],\n\t\t\tsearch: '',\n\t\t};\n\t};\n\t\n\tcomponentDidMount() {\n\t\tfetch( 'https://jsonplaceholder.typicode.com/users' )\n\t\t\t.then( res => res.json() )\n\t\t\t.then( json => this.setState( { monsters: json } ) );\n\t}\n\trender() {\n\t\tconst { monsters, search } = this.state;\n\t\tconst filteredMonsters = monsters.filter( ( monster: any ) => monster.name.toLowerCase().includes( search.toLowerCase() ) );\n\t\treturn (\n\t\t\t<div className = {'App'}>\n\t\t\t\t<h1>Monster Bolodex</h1>\n\t\t\t\t<SearchBox\n\t\t\t\t\tplaceholder = \"Search Monsters\"\n\t\t\t\t\thandleChange = {( e: { target: { value: any; }; } ) => this.setState( { search: e.target.value } )}/>\n\t\t\t\t<CardList monsters = {filteredMonsters}/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}